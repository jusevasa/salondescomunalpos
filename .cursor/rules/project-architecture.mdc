---
alwaysApply: true
---

# Salón de Comunal — Arquitectura del Proyecto

## Stack y herramientas
- React 19 + TypeScript (estricto)
- React Router v7
- Tailwind CSS 4.0 + shadcn/ui (componentes en `src/components/ui`)
- TanStack Query v5 para estado de servidor
- Zustand para estado cliente y auth store
- Zod + React Hook Form para formularios y validación
- Supabase (Auth + DB tipada via `src/types/database.ts`)

## Patrón: Screaming Architecture (por features)

Estructura base por feature:
```
src/features/{feature}/
├─ components/   # UI específica del dominio
├─ hooks/        # Hooks específicos del dominio
├─ services/     # Acceso a datos, efectos, reglas de negocio
├─ types/        # Tipos del dominio
└─ index.ts      # Barrel exports
```

Infraestructura compartida:
```
src/lib/
├─ auth/         # store de auth y servicios supabase
├─ config/       # env y cliente de supabase
├─ utils/        # utilidades (incluye `cn`, formato moneda/fechas)
└─ validations/  # esquemas Zod globales
```

Recursos globales:
```
src/components/  # UI compartida (ui/, layout/, common/)
src/hooks/       # hooks globales (p.ej. `useAuth`, `useRole`)
src/pages/       # páginas por ruta
src/router/      # guards y helpers de rutas
```

## Principios clave
- Cada feature es autocontenida y orientada al dominio
- Lógica compartida va en `src/lib` o `src/hooks`
- Formularios: React Hook Form + Zod; esquemas por feature o en `lib/validations`
- Server state con React Query; client state con Zustand
- Reutilizar los componentes shadcn/ui ya definidos en `src/components/ui`

## Alias y paths
- Alias `@` mapea a `./src` (Vite y TS config): usar importaciones absolutas `@/...`

## Rutas principales y layout
- `AdminLayout` en `src/components/layout/AdminLayout.tsx` envuelve vistas admin
- Rutas protegidas usando `ProtectedRoute` con `allowedRoles` y `requireAuth`
- Mapa de rutas declarativo en `src/main.tsx` (React Router v7)

## Autenticación y autorización
- Auth store con Zustand en `src/lib/auth/authStore.ts`
- Inicialización centralizada vía `initializeAuth()`; hook `useAuth()` expone estado/acciones
- Guard `ProtectedRoute` valida sesión, rol y perfil activo; redirige a `/login` o `/unauthorized`

## Impresión (servicio externo)
- Servicio en `src/features/shared/services/printService.ts`
- Base URL: `VITE_PRINT_API_URL`; endpoints `/api/orders/print` y `/api/orders/invoice`
- Validación de contrato previa al envío (`features/shared/utils/contractValidation.ts`)

## Estándares de UI
- Tailwind 4 con tokens; utilizar componentes en `src/components/ui` (button, dialog, table, sidebar, etc.)
- Evitar reimplementar patrones de UI; extender via props/variants cuando sea posible

## Nomenclatura y archivos
- Componentes: PascalCase `.tsx`
- Hooks: camelCase `useXxx.ts`
- Servicios: camelCase `xxxService.ts` o `index.ts` por módulo
- Tipos: PascalCase o camelCase según convenga

